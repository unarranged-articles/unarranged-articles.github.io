# Gradleのインストールとプロジェクト自動生成からビルド

## インストール方法

1, [Gradle](https://gradle.org/gradle-download/)にアクセスし"Binary only distribution"をクリックし、バイナリをダウンロード

2,  ダウンロードしたZIPファイルを適当なフォルダに展開  
    ※binディレクトリ以下のgradleがGradleの実行ファイルになる

3, 下記で環境変数を設定しgradleコマンドへパスを通す　　

 - 変数名：GRADLE_HOME
 - 変数値：展開したフォルダパス
 - 環境変数Pathに追加した下記を追加
 - 変数値：%GRADLE_HOME%\bin

4,  コマンドプロンプトまたはCygwinで下記を実行し、Gradleのバージョン情報が表示された完了
```
$ gradle -v
```

## ビルドスクリプトの作成と実行

1, 適当なディレクトリにbuild.gradleを作成し下記を記述
```
task hello << {
　	println 'Hello Gradle world!'
}
```

2, 作成したファイルが置いてあるディレクトリに移動

3, 下記コマンドを実行し下記が表示されたら実行成功
```
 $ gradle hello
:hello
Hello Gradle world!

BUILD SUCCESSFUL

Total time: 0.765 secs
```

### やっていること
 - gradleコマンドは引数で渡されたタスクを実行する
 - helloという"Hello Gradle World!"を表示するタスクを定義し、  
そのタスクを実行したので、上記の表示がされている

## JAVAプロジェクトを自動生成しビルド
1,　適当なディレクトリを作成しそこに移動

2,　下記コマンドを実行
```
gradle init --type java-library
```

3,下記が作成される
```
$ ls
build.gradle
gradle
gradlew
gradlew.bat
settings.gradle 
src
```

 - build.gradle：ビルドスクリプト
 - src/main/java:サンプルプロダクションコード
 - src/test/java:サンプルテストコード

### build.gradleの中身
```
/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'タロウ' at '16/11/04 22:29' with Gradle 3.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}
```

 - apply plugin: 'java'  
JAVAプラグインの適用
これでJavaプロジェクトに対する規約やビルドに必要なタスクが追加される

- repositories  
依存関係解決のためのリポジトリとしてMavenCentralリポジトリを指定  
これでdependenciesで指定した依存ライブラリを、  
GradleがMavenCentralリポジトリから自動的にダウンロードする

- dependencies  
依存ライブラリとしてSLF4JとJunitを指定  
    - compile:プロダクションコードのコンパイルおよび実行に必要なライブラリ  
    - testCompile:テストコードのコンパイルおよび実行に必要なライブラリ  

## ビルド実行と結果確認
自動生成したJAVAプロジェクトをビルドする

1, 下記コマンドを実行し利用な可能タスクを確認
```
$ gradle tasks
```

 実行すると様々なタスクが利用可能なことがわかる
`gradle --gui`を実行するとGUIでタスク一覧が確認できる

 2, 下記でビルドを実行
```
$ gradle build
Starting a Gradle Daemon (subsequent builds will be faster)
:compileJava
Download https://repo1.maven.org/maven2/org/slf4j/slf4j-api/1.7.21/slf4j-api-1.7.21.pom
Download https://repo1.maven.org/maven2/org/slf4j/slf4j-parent/1.7.21/slf4j-parent-1.7.21.pom
Download https://repo1.maven.org/maven2/org/slf4j/slf4j-api/1.7.21/slf4j-api-1.7.21.jar
:processResources UP-TO-DATE
:classes
:jar
:assemble
:compileTestJava
Download https://repo1.maven.org/maven2/junit/junit/4.12/junit-4.12.pom
Download https://repo1.maven.org/maven2/junit/junit/4.12/junit-4.12.jar
:processTestResources UP-TO-DATE
:testClasses
:test
:check
:build

BUILD SUCCESSFUL

Total time: 13.438 secs
```

ざっくりと下記がタスクが実行されている

 - 依存ライブラリのダウンロード

 - プロダクションコードのコンパイル

 - JARファイルへのアーカイブ  
 プロダクションコードをアーカイブしたJARファイルを/build/libs配下に作成

 - テストコードのコンパイルと実行  
テストコードのコンパイルとテストの実行  
実行したテスト結果を/build/reports/tests配下に作成  
テストだけを実行したい場合は`gradle test`を実行

 3, もう一度先ほどのビルドタスクを実行
```
$ gradle build
:compileJava UP-TO-DATE
:processResources UP-TO-DATE
:classes UP-TO-DATE
:jar UP-TO-DATE
:assemble UP-TO-DATE
:compileTestJava UP-TO-DATE
:processTestResources UP-TO-DATE
:testClasses UP-TO-DATE
:test UP-TO-DATE
:check UP-TO-DATE
:build UP-TO-DATE

BUILD SUCCESSFUL

Total time: 0.849 secs

```

これはすべてのタスクがスキップされている  
Gradleはビルドの効率化のため、各タスクがみているファイルの変更有無をチェックし、  
変更がない状態(UP-TO-DATE)であれば、タスクの実行をスキップするため

## Webアプリケーションの作成とビルド
シンプルなWebアプリケーションをビルドしてTomcat上で実行するビルドスクリプトを作成

1, 適当なディレクトリを作成し移動した後、下記コマンドを実行
```
gradle init --type java-library
```

2, 生成されたbuild.gradleを下記のように変更
```
// tomcatプラグインの利用設定
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.0'
    }
}

// apply plugin: 'java'
// Warプラグインの適用
apply plugin : 'war'
// tomcatプラグインの適用
apply plugin : 'com.bmuschko.tomcat'

repositories {
    mavenCentral()
}

dependencies {
    // JAVA EE6のAPIを追加
    providedCompile 'javax:javaee-web-api:6.0'
    compile 'org.slf4j:slf4j-api:1.7.21'
    testCompile 'junit:junit:4.12'

    // tomcat実行に必要な依存ライブラリの設定
    def tomcatVersion = '7.0.52'
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
           "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
        exclude group: 'org.eclipse.jdt.core.compiler', module:'ecj'
    }
}
```

3, src/main/java配下に下記サーブレットクラスを作成
```
HelloServlet.java

package exapmle;

import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.annotation.*;

@WebServlet(name="HelloServlet", urlPatterns={"/hello"})
public class HelloServlet extends HttpServlet {
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
		res.getWriter().print("Hello!");
	}
}
```

4, /src/main/webapp配下に下記index.htmlを作成
```
<h1>Hello, TomcatPlugin.</h1>
```

※Webプラグインの規約で、HTMLファイルなどの静的ファイルは  
/src/main/webapp配下に配置することとなっている

5, 下記コマンドでWebアプリケーションを実行
```
gradle tomcatRunWar
```
※省略形でgradle tRW とタスクを省略できる

実行したビルドのタスクは下記を実行している

 - tomcatライブラリなど依存ライブラリのダウンロード

 - Webアプリケーションのビルドとパッケージング(WARファイルの作成)

 - 組み込みTomcatの起動

 - Webアプリケーション(WARファイル)を組み込みTomcatへデプロイ

#### その他
もしビルドが失敗したら下記オプションを付与しタスクを実行することでエラー原因が特定できる  

 - -i(--info):ログレベルがINFOとなり、ビルドスクリプトのファイル名などの情報を表示する

 - -s(--stacktrace):例外発生時に例外部分のみスタックトレースを表示する
 - -S(--full-stacktrace):例外発生時にすべてのスタックトレースを表示する

下記のような例外が発生し、8080ポートが既に使われていた場合  
[ポート変更方法](https://github.com/bmuschko/gradle-tomcat-plugin)を参考にポートを変更することができる
``` 
:tomcatRunWarFailed to initialize end point associated with ProtocolHandler ["http-bio-8080"]
java.net.BindException: Address already in use: JVM_Bind <null>:8080
        at org.apache.tomcat.util.net.JIoEndpoint.bind(JIoEndpoint.java:410)
        at org.apache.tomcat.util.net.AbstractEndpoint.init(AbstractEndpoint.java:640)
``` 

``` 
例：)

tomcat {
    httpPort = 28080
    httpsPort = 28443
    ajpPort = 28009
    stopPort = 28081
}
``` 

6, 後はlocalhost:8080/プロジェクト名にアクセスし、画面が表示されたら成功

7, warファイルを作成する場合は`gradle war`実行  
※　EC2インスタンスにwarファイルを展開する手順は[こちら](https://unarranged-articles.github.io/others/aws001.html)を参照

## その他

### Gradleデーモン
gradleコマンドの起動に時間がかかる原因は、GradleがJavaVN上で起動するツールであるため  
そのため毎回起動時にJavaVNを起動し停止している  

毎回起動と停止を繰り返すのではなく、JavaVMを常駐させることができる  
"--daemon"オプションを付与し１度gradleコマンドを実行すれば、  
Gradleデーモン(JavaVNプロセス)が常駐し、  
2度目以降は高速にgradleコマンドを実行することができる

毎回最初にこのコマンドを指定するのが面倒である場合は、  
システムプロパティ"org.gradle.daemon"をtrueに設定することで、  
常に有効化とすることができる。



